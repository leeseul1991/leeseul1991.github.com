---
layout: post
title: 조건문
---

# (if~else, switch, case)


## 1. if~else

우리가 배울 제어문이란 말 그대로 프로그램의 실행 흐름을 제어하며 C언어에서는 조건문과 반복문을 제공합니다. 조건문은 우리가 특정 조건을 부여하고 그 조건이 만족하면 해당 문장을 수행할수 있는 문법입니다. 이 조건이 참(TRUE)이면 if문 내의 코드를 실행하며 거짓(FALSE)이면 if문 내의 코드를 실행하지 않고 그냥 넘겨버립니다. 조건은 수식으로 주어집니다. if 문의 구조를 보시면 다음과 같습니다.

{% highlight ruby %}
if (조건문) {
 조건식이 만족되면 실행될 문장;
}
{% endhighlight %}

조건문에 오는건 반드시 참(true) 혹은 거짓(false)이여야 하며, 주로 논리 연산자와 비교 연산자 등이 조건문에 쓰입니다. if문을 사용하기 전, 간단한 비교 연산자부터 짚고 넘어가도록 하겠습니다. 한번 아래의 표를 봅시다.

<table>
<thead>
<tr>
<th>연산자</th>
<th>연산의 예</th>
<th>의미</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;</td>
<td>a&lt;b</td>
<td>a가 b보다 작은가</td>
</tr>
<tr>
<td>&gt;</td>
<td>a&gt;b</td>
<td>a가 b보다 큰가</td>
</tr>
<tr>
<td>==</td>
<td>a==b</td>
<td>a와 b가 같은가</td>
</tr>
<tr>
<td>!=</td>
<td>a!=b</td>
<td>a와 b가 같지 않은가</td>
</tr>
<tr>
<td>&lt;=</td>
<td>a&lt;=b</td>
<td>a가 b보다 작거나 같은가</td>
</tr>
<tr>
<td>&gt;=</td>
<td>a&gt;=b</td>
<td>a가 b보다 크거나 같은가</td>
</tr>
</tbody>
</table>


수학에서 쓰는 등호, 부등호와 비슷하며 여기서 주의하실 점은 <=, >=는 허용되나 =<, =>는 허용되지 않습니다. 한번, 위의 비교 연산자들을 직접 사용해보도록 합시다.

```
#include <stdio.h>
 
int main()
{
 int a, b;
 
 scanf("%d %d", &a, &b);
 if (a<b)
  printf("b가 a보다 큽니다.\n");
 if (a>b)
  printf("a가 b보다 큽니다.\n"); 
 if (a==b)
  printf("a와 b가 같습니다.\n");
 if (a!=b)
  printf("a와 b가 같지 않습니다.\n");
 if (a<=b)
  printf("a가 b보다 작거나 같습니다.\n");
 if (a>=b)
  printf("a가 b보다 크거나 같습니다.\n");
 
 return 0;
}
```
```
<결과>
4 7
b가 a보다 큽니다.
a와 b가 같지 않습니다.
a가 b보다 작거나 같습니다.
```

우리가 여기서 만약 위의 예제에서 4와 7이란 수를 입력했다면 a<b, a!=b, a<=b와 같은 비교 연산을 만족하여 위와 같은 출력 결과를 얻을 수 있습니다. 그리고 원래는, if문 안에 오는 코드들은 모두 괄호를 사용하여 묶어주어야만 하는데, 내부에 있는 코드가 한줄이라면 중괄호를 생략할 수 있습니다. (여러개의 명령을 묶을때 중괄호 사용)





만약에, 모든 조건이 충족되지 않을 경우에는 어떠한 메시지를 출력하고 싶을 경우는 어떻게 해야 할까요? 이 경우에는, 바로 else 라는 녀석을 사용하면 됩니다. 이 else문은 조건을 모두 충족하지 않을 경우 어떤 특정한 문장을 실행하려 할때 지정하며, 이 else문은 if문에 종속적입니다. 즉, if문 없이는 else문 혼자서 독립적으로 쓰일 수 없다는 말입니다. 반드시 if문과 함께 쓰여야 한다는 소리입니다. 한번 예제를 직접 보도록 할까요?



```
#include <stdio.h>
 
int main()
{
 int a;
 
 scanf("%d", &a);
 
 if (a==2)
  printf("2가 입력되었습니다.\n");
 else
  printf("2가 아닌 다른 수가 입력되었습니다.\n");
  
return 0;
}
```

```
<결과>
4
2가 아닌 다른 수가 입력되었습니다.
```


위의 예제는 대략적으로 살펴보면 다음과 같습니다. 사용자로부터 a의 값을 입력받고 그 a의 값이 2라면 "2가 입력되었습니다"를 출력하고 만약 그렇지 않을 경우에는, "2가 아닌 다른 수가 입력되었습니다."가 출력되는 것입니다. 그리고 else뿐만 아니라, else if란 녀석도 있는데 이 녀석도 else문 처럼 if문에 종속적이며, 필요하다면 얼마든지 추가해도 됩니다. 아래 예제를 통해 else if를 간단히 이해하도록 합시다.


```
#include <stdio.h>
 
int main()
{
 int a;
 
 scanf("%d", &a);
 
if (a==2) // a가 만약 2라면
 printf("2가 입력되었습니다.\n");
else if (a==3) // a가 2가 아닌 3이라면
 printf("3이 입력되었습니다.\n");
else // 위의 조건들을 모두 만족하지 않는다면
 printf("2와 3이 아닌 다른 수가 입력되었습니다.\n");
 
 return 0;
}
```

```
<결과>
3
3이 입력되었습니다.
```

위의 예제에서는 입력된 a의 값이 2라면 2가 입력되었다는 문장을, 3이라면 3이 입력되었다는 문장을, 2도 아니고 3이 아니라면 2와 3도 아닌 다른 수가 입력되었다는 문장을 출력하도록 했습니다. 자, 이 else if란 녀석이 일반 if문과 다른점은 예를 들어, 위의 예제에서 2가 입력되었다면 a와 2가 같은지 비교를 하는 구간에서 참이되어 코드를 실행하고 빠져나옵니다. 그리고 3이 입력되었을 경우, a는 2와 같지 않으므로 다음 비교에서 3과 같은지 비교를 하게 되는데 이 경우 조건이 성립하므로 이 구간의 코드를 실행하고 빠져나옵니다. 만약에, 아래와 같이 if문 만으로 예제를 작성했다면 어땠을까요?


```
if (a==2)
 printf("2가 입력되었습니다.\n");
if (a==3)
 printf("3이 입력되었습니다.\n");
if (a==4)
 printf("4가 입력되었습니다.\n");
 
 
if (a==2)
 printf("2가 입력되었습니다.\n");
else if (a==3)
 printf("3이 입력되었습니다.\n");
else if (a==4)
 printf("4가 입력되었습니다.\n");
<br>
```

위 두 예제는 둘다 같은 결과를 출력합니다. 그렇지만 2를 입력했다 가정하고, 1번 예제 같은 경우는 첫번째 if문의 조건 검사를 수행하고, 두번째, 세번째도 함께 거치게 됩니다. 이것은 불필요한 비교 연산이며 비효율적인 코드가 아닐 수 없습니다. a가 2임을 이미 확인했는데, 3과 4와 같은지 비교하는 연산은 더이상 불필요한 연산이겠죠? 

2번 예제는 첫번째 if문의 조건 검사를 거치고 2와 일치하여 조건을 만족시키고 빠져나옵니다. 만약에 3을 입력했다면 첫번째와 두번째의 if문을 거치게 됩니다. 이해 되셨나요?

참고로, 우리가 배운 if~else문은 중첩이 가능하여 다음과 같이 확장시킬 수 있습니다.


```
if (a==11) {
 printf("11이 입력되었습니다.");
 if (a>10)
  printf("입력된 값이 10보다 큽니다.");
}
```


이는 if문 안에서 또 다른 if~else문을 사용할수 있다는 말입니다. 물론, 중첩 횟수는 제한되어 있는게 아닌 필요에 의해서 계속 중첩이 가능하다는 사실! 잊지마시고 기억해두세요. 그리고 추가로, 비교 연산자에 이어서 논리 연산자에 대해 간단히 알아보도록 하겠습니다. 아래 표를 한번 살펴보고, 논리 연산자가 어떤 녀석인지 대충 짐작을 해보도록 합시다.







{% highlight ruby %}
{% endhighlight %}
