---
layout: post
title:  반복문
date:   2014-11-01 22:02:13
categories: jekyll update
---

#반복문
## (while, for, do~while)


###1. while, do~while, continue

반복문에 대해서 살펴보도록 할텐데, 반복문의 이름에서 어떤 역할을 하는 녀석인지 대충 짐작이 가시죠? 만약에 어느 한 문장을 100번 출력하고 싶으면 어떻게 코드를 작성해야 할까요? 일일히 printf를 사용하여 100번씩이나 함수를 호출해야 할까요? 이것은 상당히 비효율적이며 보기도 안좋습니다. 그럼 어떻게 해야할까요? 이것을 우리가 배울 반복문이란 녀석이 해결해 줄수 있습니다. 이 반복문 중에서도 여러가지가 있는데, 우선은 while문에 대해 알아보도록 하겠습니다. while 문의 구성은 다음과 같습니다.

{% highlight ruby %}
while(반복 조건)
{
    반복 영역;
}
{% endhighlight %}

이 while문은 반복 조건이 참(TRUE)이면 계속 반복 영역에 있는 코드를 실행시키며 루프를 돌게 됩니다. 위에서 말한 문장을 100번 출력시키는 코드를 while문을 이용하여 코드로 옮기면 다음과 같습니다.

{% highlight ruby %}
#include <stdio.h>
 
int main()
{
 int i=0; // i를 0으로 초기화, 초기화 하지 않으면 쓰레기값으로 초기화 됨
 
 while (i<100) {
  printf("호출 횟수: %d\n", i);
  i++; // 후위증가 연산자, i의 값을 1씩 증가시킴
 }
 
 return 0;
} 

{% endhighlight %}

결과 :
{% highlight ruby %}
호출 횟수: 0
호출 횟수: 1
호출 횟수: 2
..
호출 횟수: 98
호출 횟수: 99
계속하려면 아무 키나 누르십시오 . . .
{% endhighlight %}

위 코드를 실행하면 정확히 printf 함수가 100회 호출되는것을 확인할 수 있습니다. i를 0으로 초기화 시키고 i<100이 참일때동안 루프를 돌면서 i를 1씩 증가시키고 조건이 거짓이 되면 빠져나오도록 했습니다. 그렇게 루프를 돌면서 i가 100이 되는 순간 조건수식 i<100이 거짓이 되면서 반복문을 빠져나왔습니다. 그런데 반복 조건식이 항상 참이면 어떻게 될까요?

{% highlight ruby %}
#include <stdio.h>
 
int main()
{
 while (1) { // 항상 참
  printf("무한 루프\n");
 }
 return 0;
}

{% endhighlight %}

결과:
{% highlight ruby %}
무한 루프

무한 루프

무한 루프

...

{% endhighlight %}

5행의 반복 조건이 와야할곳에 1이 왔는데 1은 논리적으로 참(TRUE)입니다. 따라서 반복 조건이 항상 참이므로 반복 영역에 있는 코드를 계속 호출합니다. 이 무한루프는 개발자의 실수로 인해 만들어 지기도 하나, 필요에 의해 만들어지기도 합니다. 무한 루프를 탈출하려면 switch 문을 공부할때 배웠던 break 문을 사용하면 탈출할수 있습니다. 

그 다음으로는 간단히 do~while에 대해 알아보도록 합시다. do~while문도 while문과 크게 차이나는 것은 없습니다. do~while문의 구성은 아래와 같습니다.

{% highlight ruby %}
do {
 반복 영역;
} while (반복 조건);
{% endhighlight %}

앞에서 설명드린 while문이랑 상당히 유사하며 차이점은 반복 영역에 있는 코드를 한번 실행하고 반복 조건이 참일때동안 루프를 돕니다. while문은 반복조건이 앞에있다면 do~while은 반복 조건이 뒤에 있다고 이해하시면 됩니다.  while문을 쓰든 do~while문을 쓰든 상관이 없지만 do~while 활용이 더 적절할때가 있습니다.

{% highlight ruby %}
#include <stdio.h>
 
int main()
{
 int a, sum=0;
  
 do {
  printf("값을 입력하세요: ");
  scanf("%d", &a);
  sum+=a;
} while (a!=0);
printf("합: %d\n", sum);
 return 0;
}

{% endhighlight %}

결과:
{% highlight ruby %}
값을 입력하세요: 2
값을 입력하세요: 4
값을 입력하세요: 6
값을 입력하세요: 8
값을 입력하세요: 10
값을 입력하세요: 12
값을 입력하세요: 0
합: 42
계속하려면 아무 키나 누르십시오 . . .
{% endhighlight %}

우선 반복 영역에 있는 코드를 한번 실행하면서 사용자로부터 a의 값을 입력받고 그 a의 값을 sum에 더하고 조건이 참인지 검사한뒤에 참이면 계속 루프를 돌고 거짓이면 빠져나오게 됩니다. 이처럼 조건을 검사하기전 반복 영역을 최소한 한번은 실행시켜야 하는 상황이면 do~while를 고려해볼수도 있습니다. 

만약에 1부터 100까지의 수 중 홀수만 출력하게 하는 프로그램을 작성하려 한다면 물론 반복문을 사용하겠죠? 그런데, while문을 사용한다고 가정하여 어느 특정 조건을 만족하면 반복 영역에 있는 코드를 실행하지 않고 한 회 쉬게 한다면 어떻게 코드를 작성할 수 있을까요? 이것은 continue 라는 녀석이 쉽게 해결해 줄수 있습니다. continue란 녀석이 어떤 녀석인지 알아보기 위해 아래의 코드를 직접 실행해보고 조금 변형하여 이해를 하시길 권장하는 바입니다.


{% highlight ruby %}
#include <stdio.h>
 
int main()
{
 int i=0;
 
 while (i<=100) {
  i++;
  if (i%2!=0) continue;
  printf("%d ", i);
 }
 printf("\n");
 
 return 0;
}
{% endhighlight %}

결과:
{% highlight ruby %}
2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56
58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100
계속하려면 아무 키나 누르십시오 . . .
{% endhighlight %}

코드를 읽어보면 우선 i를 0으로 초기화 시키고 i<=100이 참일때동안 루프를 도는데 여기서 주의할 것은 i를 2로 나눠서 나머지가 0이 아니면, 즉 홀수(나누어 떨어지지 않는 경우)면 continue 라는 키워드를 만나 반복 조건을 검사하는 영역으로 돌아갑니다. 


<img src="http://cfile8.uf.tistory.com/image/197D20334F31FCBA1B96D0" width="100" height="100">


그렇다면 i가 짝수일때 i%2!=0의 조건을 충족하지 못하면서 빠져나오고 그 i의 값을 출력합니다.(짝수만 출력하는 것이 됨) 많이는 사용되지 않으며 정리하자면 continue는 반복문에서 조건 점검부로 점프하여 다음 값을 실행할수 있게 만들어주는 명령입니다.


{% highlight ruby %}
{% endhighlight %}
