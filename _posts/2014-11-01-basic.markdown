---
layout: post
title:  반복문
date:   2014-11-01 22:02:13
categories: jekyll update
---

#반복문
## (while, for, do~while)


###1. while, do~while, continue

반복문에 대해서 살펴보도록 할텐데, 반복문의 이름에서 어떤 역할을 하는 녀석인지 대충 짐작이 가시죠? 만약에 어느 한 문장을 100번 출력하고 싶으면 어떻게 코드를 작성해야 할까요? 일일히 printf를 사용하여 100번씩이나 함수를 호출해야 할까요? 이것은 상당히 비효율적이며 보기도 안좋습니다. 그럼 어떻게 해야할까요? 이것을 우리가 배울 반복문이란 녀석이 해결해 줄수 있습니다. 이 반복문 중에서도 여러가지가 있는데, 우선은 while문에 대해 알아보도록 하겠습니다. while 문의 구성은 다음과 같습니다.

{% highlight ruby %}
while(반복 조건)
{
    반복 영역;
}
{% endhighlight %}

이 while문은 반복 조건이 참(TRUE)이면 계속 반복 영역에 있는 코드를 실행시키며 루프를 돌게 됩니다. 위에서 말한 문장을 100번 출력시키는 코드를 while문을 이용하여 코드로 옮기면 다음과 같습니다.

{% highlight ruby %}
#include <stdio.h>
 
int main()
{
 int i=0; // i를 0으로 초기화, 초기화 하지 않으면 쓰레기값으로 초기화 됨
 
 while (i<100) {
  printf("호출 횟수: %d\n", i);
  i++; // 후위증가 연산자, i의 값을 1씩 증가시킴
 }
 
 return 0;
} 

{% endhighlight %}

결과 :
{% highlight ruby %}
호출 횟수: 0
호출 횟수: 1
호출 횟수: 2
..
호출 횟수: 98
호출 횟수: 99
계속하려면 아무 키나 누르십시오 . . .
{% endhighlight %}

위 코드를 실행하면 정확히 printf 함수가 100회 호출되는것을 확인할 수 있습니다. i를 0으로 초기화 시키고 i<100이 참일때동안 루프를 돌면서 i를 1씩 증가시키고 조건이 거짓이 되면 빠져나오도록 했습니다. 그렇게 루프를 돌면서 i가 100이 되는 순간 조건수식 i<100이 거짓이 되면서 반복문을 빠져나왔습니다. 그런데 반복 조건식이 항상 참이면 어떻게 될까요?

{% highlight ruby %}
#include <stdio.h>
 
int main()
{
 while (1) { // 항상 참
  printf("무한 루프\n");
 }
 return 0;
}

{% endhighlight %}

결과:
{% highlight ruby %}
무한 루프

무한 루프

무한 루프

...

{% endhighlight %}



{% highlight ruby %}
{% endhighlight %}
